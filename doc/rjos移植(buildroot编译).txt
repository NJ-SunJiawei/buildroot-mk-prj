openEuler gcc=10.3.1 glibc=2.34 编译内核：5.10.0
Linux k8s-node1 5.10.0-136.12.0.86.oe2203sp1.aarch64 #1 SMP Tue Dec 27 17:51:19 CST 2022 aarch64 aarch64 aarch64 GNU/Linux

rj的部分功能修改内核了，欧拉服务器上是不是要升级内核

buildroot编译参考：
https://doc.embedfire.com/lubancat/build_and_deploy/zh/latest/building_image/buildroot/buildroot.html

下载openEuler x86 容器：
容器：https://mirrors.nju.edu.cn/openeuler/openEuler-22.03-LTS-SP3/docker_img/

自身安装x86编译器： 
yum groupinstall "Development Tools" --nogpgcheck -y (基础工具)
yum install ncurses-devel cmake wget python rsync (make menuconfig 需要)
dnf install lzip
yum install vim sudo  rpm-build cpio
yum install meson ninja


安装交叉编译器：gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz 
glibc=2.33 编译内核：4.20.0
交叉编译器：https://developer.arm.com/downloads/-/gnu-a
交叉编译器(备选)：https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads
交叉编译器（linaro新版本）：https://snapshots.linaro.org/gnu-toolchain/
交叉编译器（linaro老版本）：https://releases.linaro.org/components/toolchain/binaries/
tar -xJf gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz
ps:修改buildroot-xxxxx\toolchain\helpers.mk 中check_gcc_version和check_kernel_headers_version函数 exit改为echo
ps:记得给权限给交叉编译器

buildroot工程下载：版本2023.02/2017.02.5(老版本废弃)
https://github.com/buildroot/buildroot/tags?after=2023.02
tar -zxvf buildroot-xxxx.tar.gz


MobaXterm 进入make menuconfig 里面的输入框按Backspace按键无法删除内容的问题:
https://blog.csdn.net/qq_37858386/article/details/136614723


alias cp="cp -r"


开始配置.config
make defconfig
make menuconfig

Target options
        -> Target Architecture = AArch64 (little endian)
        -> Target Binary Format = ELF
        -> Target Architecture Variant = cortex-A72
        -> Floating point strategy = FP-ARMv8

Toolchain
   -> Toolchain type = External toolchain
   -> Toolchain = Custom toolchain //选择用户的交叉编译器
   -> Toolchain origin = Pre-installed toolchain
   -> Toolchain path = /home/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu //这里填入我们上面获得的交叉编译器路径
   -> Toolchain prefix = aarch64-none-linux-gnu //前缀
   -> External toolchain gcc version = 10.x
   -> External toolchain kernel headers series = 5.10.x
   -> External toolchain C library = glibc/eglibc
   -> [*] Toolchain has SSP support? (NEW) //选中
   -> [ ] Toolchain has RPC support? (NEW) //不选中
   -> [*] Toolchain has C++ support? //选中
   -> [*] Enable MMU support (NEW) //选中
   #-> Extra toolchain libraries to be copied to target = m pthread
  
 System configuration
   -> System hostname = Embedfire_imx6ull //平台名字
   -> System banner = Welcome to embedfire i.mx6ull //欢迎语
   -> Init system = BusyBox //使用 busybox
   -> /dev management = Dynamic using devtmpfs + mdev //使用 mdev
   -> [*] Enable root login with password (NEW) //使能登录密码
   -> Root password = 123456 //登录密码为 root

配置linux安装，使用额外defconfig，配置版本5.10.1
配置额外rj安装包

@@@@参考git记录，去掉所有busybox相关的。
@@@@此外skeleton可以替换为外部工程。rootfs可以可以为openEuler rootfs
	修改buildroot-2023.02\package\Config.in ，屏蔽所有和skeleton相关的
	修改buildroot-2023.02\package\pkg-generic.mk 766行skeleton相关的

构建buildroot-external-s5000c和buildroot-output

#外部输出：make O=$PWD -C path/to/buildroot
#外部构建目录: make BR2_EXTERNAL=/path/to/foo menuconfig

******BR2_JLEVEL=1 使用单线程

make <package>-dirclean
make <package>-rebuild
make clean
make distclean 删除所有
make install-staging
make install-target

(staging会安装到host下的sysroot目录)
STAGING_SUBDIR = $(GNU_TARGET_NAME)/sysroot
STAGING_DIR    = $(HOST_DIR)/$(STAGING_SUBDIR)


构建config:
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c menuconfig
cp .config configs/sjw_10.3.1_defconfig

下载离线包:
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c source

编译内核：（menuconfig需要选中openssl、libelf、pahole）
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c linux
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c linux-clean
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c linux-rebuild
编译dpdk：
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c dpdk

skeleton-init-common skeleton-init-sysv skeleton 会安装到系统（这是啥玩意儿，是不是可以切换成openEuler）

docker commit 06181f2280fb openeuler-gxx:latest 把当前的镜像保存下来


外部依赖(buildroot有)：ncurses/ncurcesw(6.3)  libzlib(1.2.13) libxml(2.10.3)   json-c(0.16) libcap(2.65)
                   
??? 外部依赖：dpdk(19.11.5) nginx(1.12.2) lua(5.3.6) readline(8.2/6.2)

rj编译修改点：（utils_com）
配置：PRODUCT_TYPE_CU或者PRODUCT_TYPE_DU=y
1、utils_com中所有macros.mk中65行 log_sha1内容屏蔽
2、buildroot需要安装ncurses
3、添加utils_com/common/generic/popt/popt.mk中85行
'''
LDFALGS="$(pkg_ldflags)"
'''
4、屏蔽utils_com/third_part/zstd/Makfile中61行和64行和EXPORT_HEADER相关（此条作废）
5、屏蔽utils_com/third_part/file/Makfile中84行和87行和EXPORT_HEADER相关（此条作废）

8、修改utils_com/third_part/rg-openssl/rg-openssl.mk中76行：
'''
.PHONY:all
all:
	$(TARGET_MAKE_ENV) $(MAKE) $(RJ_ENVS) -f openssl.mk
'''
   修改rg-openssl.mk中187行：install-images: build
   修改rg-openssl.mk中202行：install: install-images       

   修改utils_com/third_part/openssl-3.1.1/openssl_3.1.1.mk中197行，CONFIG_OPENSSL_ENABLE_EMPTY=n
   修改utils_com/third_part/openssl-3.1.1/openssl_3.1.1.mk中119添加
   修改utils_com/third_part/openssl-3.1.1/openssl_3.1.1.mk中237:@cd ${OPENSSL_SRC_DIR} && make generate CROSS_COMPILE= && ${MAKE} CROSS_COMPILE=
'''
ifeq {$(CROSS), aarch64-none-linux-gnu}
	CROSS_PARAM:=linux-aarch64
endif
'''
9、修改utils_com/third_part/curl/Makfile中27、85添加
'''
pkg_ldflags := $(LINKFLAGS) $(BUILD_LDFLAGS)
LDFALGS="$(pkg_ldflags)"
'''

10、修改utils_com/third_part/shadow中所有macros.mk中54行 log_sha1内容屏蔽
	Makfile的100、101、107、108、109加上-
	修改67行 
	${MAKE} clean ; \
	${MAKE} $(pkg)-install install; \

11、utils_com/third_part/libssh makefile修改36、37行：
	-DZLIB_INCLUDE_DIR=$(ROOTFS)/usr/include
	-DZLIB_LIBRARY=$(ROOTFS)/usr/lib64
	makefile修改49、50行：
	改为：$(top_srcdir)/$(DIR)/output/$(INSTALL_SODIR)

12、utils_com/third_part/libssh2 makefile修改17行：
	EXTRA_FLAGS = $(BUILD_CFLAGS) -I$(include_dir)

13、utils_com/third_part/rg-libnl中libnl.mk 修改120行判断屏蔽#ifeq($(BR2_ARCH),"aarch64") 判断语句只要else

14、utils_com/third_part/libpcap中Rule.mk 修改64行 -include $(KCONFIG)

15、utils_com/third_part/readline中Rule.mk 修改64行 -include $(KCONFIG)
	Makefile修改24行install: build
	ARCH改为ARCH64
	
16、utils_com/third_part/rg_lua中Makefile大改：
'''
						.PHONY: all

						all: build install

						.PHONY: build

						build: build_src
						build_lib:
							$(MAKE) CFLAGS="$(CFLAGS)" -C $(top_srcdir)/src/lib _PDIR="$(OUTPUT_DIR)/src/lib"
							@echo "Compiled OK! find output in $(OUTPUT_DIR)/src/lib"
						build_luac: build_lib
							$(MAKE) CFLAGS="$(CFLAGS)" -C $(top_srcdir)/src/luac _PDIR="$(OUTPUT_DIR)/src/luac"
							@echo "Compiled OK! find output in $(OUTPUT_DIR)/src/luac"
						build_src: build_luac
							$(MAKE) CFLAGS="$(CFLAGS)" -C $(top_srcdir)/src _PDIR="$(OUTPUT_DIR)/src"
							@echo "Compiled OK! find output in $(OUTPUT_DIR)/src"

						.PHONY: install

						install: build
							@mkdir -p $(IMAGES)/rootfs/usr/bin
							@cp -af $(install_root)/rootfs/$(INSTALL_SODIR)/* $(IMAGES)/rootfs/$(INSTALL_SODIR)
							@cp -af $(install_root)/rootfs/usr/bin/* $(IMAGES)/rootfs/usr/bin
'''
								Rule.mk 修改43行添加 -I$(IMAGES)/header
								        修改44行添加 -L$(IMAGES)/rootfs/$(INSTALL_SODIR)

17、utils_com/third_part/libnumactl中Rule.mk 修改64行 -include $(KCONFIG)
	Makefile修改29行install: build

18、utils_com/third_part/pcre-lib/pcre/Makfile 修改39行 install: src

19、utils_com/third_part/rg-zip/rgzip 修改30行 install： src
	utils_com/third_part/rg-unzip/unrgzip 修改30行 install： src

20、utils_com/third_part/lnsp
	Makefile.nginx修改install: build
				  修改22、42行aarch64-linux-gnu为aarch64-none-linux-gun
	Makefile.atomic修改install: build
	修改nginx-1.12.2/auto/lib/openssl/conf 添加target_rj的头文件和库文件搜索目录

21、utils_com/third_part/lrzsz Makfile修改76行 clean $(pkg)-install install 拆开make
                                          91行 make和make install拆开
										  
rj编译修改点：（utils-cstm）
1、添加autoconf.h头文件，我从rj包移植过来了
1、libham/ham_vsd.c 第一行添加 (gcc打开D_GNU_SOURCE扩展可以不用修改)
#define _GNU_SOURCE
#include <sched.h>
2、dpdk需要依托内核
   指定内核源码路径（内核源码需要编译过,需要打开CONFIG_UIO=y，内核源码编译依托buildroot）
   不需要修改锐捷好像适配了（原始版本dpdk19.11.5 kni驱动使用kernel5.10.1编译报错，估计不兼容，可以make CONFIG_RTE_KNI_KMOD=n 禁止kni编译，或者换成21.11.3）
3、netconf/libnetconf2/src/Makefile 修改85、86行：
                                    MY_LIB_PATH = $(ROOT_IMAGES)/$(INSTALL_SOIDR)
									MY_HEADER = $(IMAGES)/header
									修改121行#屏蔽
rj编译修改点：（utils-adpl-api）
1、Rule.mk 51行修改 LINKFLAGS+=$(LDFLAG) -L/$(install_sodir) -L/$(install_adir)
           44行BUILD_CFLAGS增加$(CFLAGS)
2、libaaa/Makefile 40行添加 $(PRJROOT)/images/rootfs/usr/lib64
3、libhdf/hdf_lib_log.c: <oam_lib/erlib.h>   从锐捷工程拷贝oam_lib/erlib.h(好像就是liber/erlib.h)到include/oam_lib目录
    hdf_lib_node.c  27行extern
	inc/hdf_lib_proc.h 48行extern
4、librg_kvdb/Makefile 148行增加-L$(LDFLAGS)
5、libalarm/Makefile 33行增加-I$(ROOTFS)/usr/include/libxml2
6、libne_mgr/Makefile 33行增加-I$(ROOTFS)/usr/include/libxml2
6、libccm/Makfile 104行增加 -L$(LDFLAGS)
    libccm/ccm_demo/Makfile 167行增加 -L$(LDFLAGS) 101行增加ADD_LIB库，把ccm的依赖都带上
8、libdns_client   编译器打开D_GNU_SOURCE扩展
9、libidl_visual   95、98行增加-L$(LDFLAGS)
 
rj编译修改点：（utils-adpl）
1、 utils-adpl/gnb_guard/5G_IPR/gNB_SW/gNB_CU/cu_cp/commom/utils/inc/gnb_common_utils.h 306行加extern
    utils-adpl/gnb_guard/5G_IPR/gNB_SW/gNB_CU/cu_cp/commom/utils/inc/rrc_defines.h 32行加extern

rj编译修改点：（utils-frwk）
RG_MOM_CLIENT_STATIC_BUFFER 要配置y
1、utils-frwk/mom/rg_mom_server/deps/Makefile 37\51\52行ARCH改为ARCH64
2、utils-frwk/mom/rg_mom_client/c/rg_mom_ab_debug.h 7行增加typedef
3、utils-frwk/mom/rg_mom_deamon Makefile 14行增加-I$(ROOTFS)/usr/include/libxml2
   utils-frwk/cli/cli-lib Makefile 增加-L$(LDFLAGS)
4、创建rg_tipc_types.h文件定义在（从原工程copy ，定义在5g-rgos-platform/public/include  tipc、glibc_fixed、rg_sys）
5、utils-frwk/gtpuPaketRelay/Makefile 24行改为：$(ROOTFS_IMAGES)/$(INSTALL_SODIR) 
                                      30行增加：GNB_EGTPU_PR_DPDK=1
6、utils-frwk/gtpuPaketRelay/.../pr_data_trans/inc pr_dpdk_dbg.h 24行加 extern
                                                   pr_dpdk_dbg.c 5行加 int pr_dpdk_logtype;
                                                   pr_dpdk_if.h  290、401行加 extern
												   pr_dpdk_ipv4.c 273行加 extern
												   fwd_nat.h 22行加extern
												   fwd_nat.c 8行加 fwd_nat_tbl_t nat_local_tbl;
												   nf_maint_nat.h 22行加 extern
												   nf_maint_nat.c 13行加 nf_maint_nat_tbl_t g_nat_nf_maint_tbl;
7、utils-frwk/rg_at/.../rg_at_process/ Makefile 123行加 $(LDFLAGS)
8、utils-frwk/cli/rgcli-user/src Makefile 175行加-L$(BASE_DIR)/build/utils-frwk/images/rootfs/usr/lib64	 -L$(BASE_DIR)/build/utils-frwk/images/rootfs/usr/lib
9、选择宽字符支持：在 ncurses 选项下，你应该能看到一个子选项来启用宽字符支持（通常称为 Wide character support (ncursesw)）  
    utils-frwk/cli/rgcli-user/pager/more.c 77、79行ncursesw去掉

---------------------------------------------------------------------
10、utils-frwk/psh_proxy/app/Makefile 188行添加$(LDFLAGS)
	内核/kernel/signal.c需要EXPORT_SYMBOL(do_send_sig_info);
	内核/kernel/irq/irqdesc.c EXPORT_SYMBOL(kstat_irqs_cpu);

11、utils-frwk/rg_proc_ham/Makefile 190行添加$(LDFLAGS)
                          ham_demo/Makefile 125行添加$(LDFLAGS)

-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
buildroot_defconfig
env-s5000c.mk
内核替换

---------------------
utils_com openssl_3.1.1/../openssl_3.1.1.mk  
           237: 	@cd ${OPENSSL_SRC_DIR} && make generate CROSS_COMPILE= && ${MAKE} CROSS_COMPILE=
		   
放开utils_com/third_part/zstd/Makfile中61行和64行和EXPORT_HEADER相关
放开utils_com/third_part/file/Makfile中84行和87行和EXPORT_HEADER相关

utils_com/third_part/curl/Makfile：85行加 -lzstd
utils-adpl-api/rg_protobuf_rt/Makfile 7行改为 cd ./src/ && cmake ./  && $(MAKE)
utils-adpl-api/rg_protobuf_rt/GenIDL.sh 修改：cnmpt
utils-frwk/cwmp/cwmp-usr/src/makfile 65行加 -lzstd
utils-frwk/oam_core/oam_core_src/frame/src/oam_frame_create_open_station_file.c    149行改为 open(path, O_RDWR | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR)
utils-frwk/oam_core/oam_core_src/frame/src/oam_frame_proto_ready.c   10行加extern
utils-frwk/oam_core/Makfile   174行增加$(LDFLAGS)
utils-frwk/oam_core/oam_core_adaptr/Makfile   155行增加$(LDFLAGS)
utils-frwk/oam_core/oam_core_demo/Makfile   6行增加$(CFLAGS)
utils-frwk/nginx-usr/app/Makefile 135行增加$(LDFLAGS)
utils-frwk/ddfs/dis_dev_src/src/Makefile 增加$(LDFLAGS)

---------------------
bug1:"undefined symbol: rg_thread_add_timer_withname
/home/buildroot-external-s5000c/source/utils-adpl-api/libras_common
51:ADD_LIB = -lpthread -lrt -lrg-thread
115:	$(CC) $(CFLAGS) $(INCLUDE) $(ALL_OBJS) $(LDFLAGS) $(ADD_LIB) -o $(LIB_OUTPUT)

fix2:linux
make menuconfig ===>修改产出镜像为Image.gz==》gzip

fix3:om system.mk 127行，放开链接
