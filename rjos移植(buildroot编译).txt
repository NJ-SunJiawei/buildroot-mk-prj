openEuler gcc=10.3.1 glibc=2.34 编译内核：5.10.0
Linux k8s-node1 5.10.0-136.12.0.86.oe2203sp1.aarch64 #1 SMP Tue Dec 27 17:51:19 CST 2022 aarch64 aarch64 aarch64 GNU/Linux

buildroot编译参考：
https://doc.embedfire.com/lubancat/build_and_deploy/zh/latest/building_image/buildroot/buildroot.html

下载openEuler x86 容器：
容器：https://mirrors.nju.edu.cn/openeuler/openEuler-22.03-LTS-SP3/docker_img/

自身安装x86编译器： 
yum groupinstall "Development Tools" --nogpgcheck -y (基础工具)
yum install ncurses-devel cmake wget python rsync (make menuconfig 需要)
dnf install lzip
yum install vim sudo 
yum install meson ninja

安装交叉编译器：gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz 
glibc=2.33 编译内核：4.20.0
交叉编译器：https://developer.arm.com/downloads/-/gnu-a
交叉编译器(备选)：https://developer.arm.com/downloads/-/arm-gnu-toolchain-downloads
交叉编译器（linaro新版本）：https://snapshots.linaro.org/gnu-toolchain/
交叉编译器（linaro老版本）：https://releases.linaro.org/components/toolchain/binaries/
tar -xJf gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu.tar.xz
ps:修改buildroot-xxxxx\toolchain\helpers.mk 中check_gcc_version和check_kernel_headers_version函数 exit改为echo
ps:记得给权限给交叉编译器

buildroot工程下载：版本2023.02/2017.02.5(老版本废弃)
https://github.com/buildroot/buildroot/tags?after=2023.02
tar -zxvf buildroot-xxxx.tar.gz


MobaXterm 进入make menuconfig 里面的输入框按Backspace按键无法删除内容的问题:
https://blog.csdn.net/qq_37858386/article/details/136614723

开始配置.config
make defconfig
make menuconfig

Target options
        -> Target Architecture = AArch64 (little endian)
        -> Target Binary Format = ELF
        -> Target Architecture Variant = cortex-A72
        -> Floating point strategy = FP-ARMv8

Toolchain
   -> Toolchain type = External toolchain
   -> Toolchain = Custom toolchain //选择用户的交叉编译器
   -> Toolchain origin = Pre-installed toolchain
   -> Toolchain path = /home/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu //这里填入我们上面获得的交叉编译器路径
   -> Toolchain prefix = aarch64-none-linux-gnu //前缀
   -> External toolchain gcc version = 10.x
   -> External toolchain kernel headers series = 5.10.x
   -> External toolchain C library = glibc/eglibc
   -> [*] Toolchain has SSP support? (NEW) //选中
   -> [ ] Toolchain has RPC support? (NEW) //不选中
   -> [*] Toolchain has C++ support? //选中
   -> [*] Enable MMU support (NEW) //选中
   #-> Extra toolchain libraries to be copied to target = m pthread
  
 System configuration
   -> System hostname = Embedfire_imx6ull //平台名字
   -> System banner = Welcome to embedfire i.mx6ull //欢迎语
   -> Init system = BusyBox //使用 busybox
   -> /dev management = Dynamic using devtmpfs + mdev //使用 mdev
   -> [*] Enable root login with password (NEW) //使能登录密码
   -> Root password = 123456 //登录密码为 root

配置额外rj安装包

@@@@参考git记录，去掉所有busybox相关的。
@@@@此外skeleton可以替换为外部工程。rootfs可以可以为openEuler rootfs
	修改buildroot-2023.02\package\Config.in ，屏蔽所有和skeleton相关的
	修改buildroot-2023.02\package\pkg-generic.mk 766行skeleton相关的

构建buildroot-external-s5000c和buildroot-output

#外部输出：make O=$PWD -C path/to/buildroot
#外部构建目录: make BR2_EXTERNAL=/path/to/foo menuconfig

make <package>-dirclean
make <package>-rebuild
make clean
make distclean 删除所有
make install-staging
make install-target

(staging会安装到host下的sysroot目录)
STAGING_SUBDIR = $(GNU_TARGET_NAME)/sysroot
STAGING_DIR    = $(HOST_DIR)/$(STAGING_SUBDIR)


构建config:
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c menuconfig
cp .config configs/sjw_10.3.1_defconfig

下载离线包:
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c source

编译dpdk：
make -C /home/buildroot-2023.02 O=/home/buildroot-output BR2_EXTERNAL=../buildroot-external-s5000c dpdk

skeleton-init-common skeleton-init-sysv skeleton 会安装到系统（这是啥玩意儿，是不是可以切换成openEuler）

docker commit 06181f2280fb openeuler-gxx:latest 把当前的镜像保存下来


外部依赖(buildroot有)：ncurses(6.3) libzlib(1.2.13) 
                       ???lua(5.3.6) readline(8.2/6.2) 
外部依赖：dpdk(19.11.5) 

nginx(1.12.2)

rj编译修改点：（utils_com）
配置：PRODUCT_TYPE_CU或者PRODUCT_TYPE_DU=y
1、utils_com中所有macros.mk中65行 log_sha1内容屏蔽
2、buildroot需要安装ncurses
3、添加utils_com/common/generic/popt/popt.mk中85行
'''
LDFALGS="$(pkg_ldflags)"
'''
4、屏蔽utils_com/third_part/zstd/Makfile中61行和64行和EXPORT_HEADER相关
5、屏蔽utils_com/third_part/file/Makfile中84行和87行和EXPORT_HEADER相关

8、修改utils_com/third_part/rg-openssl/rg-openssl.mk中76行：
'''
.PHONY:all
all:
	$(TARGET_MAKE_ENV) $(MAKE) $(RJ_ENVS) -f openssl.mk
'''

   修改utils_com/third_part/openssl-3.1.1/openssl_3.1.1.mk中197行，CONFIG_OPENSSL_ENABLE_EMPTY=n
   修改utils_com/third_part/openssl-3.1.1/openssl_3.1.1.mk中119添加
'''
ifeq {$(CROSS), aarch64-none-linux-gnu}
	CROSS_PARAM:=linux-aarch64
endif
'''
9、修改utils_com/third_part/curl/Makfile中27、85添加
'''
pkg_ldflags := $(LINKFLAGS) $(BUILD_LDFLAGS)
LDFALGS="$(pkg_ldflags)"
'''

10、修改utils_com/third_part/shadow中所有macros.mk中54行 log_sha1内容屏蔽
	Makfile的100、101、107、108、109加上-
	修改67行 
	${MAKE} clean ; \
	${MAKE} $(pkg)-install install; \

11、utils_com/third_part/libssh makefile修改36、37行：
	-DZLIB_INCLUDE_DIR=$(ROOTFS)/usr/include
	-DZLIB_LIBRARY=$(ROOTFS)/usr/lib64
	makefile修改49、50行：
	改为：$(top_srcdir)/$(DIR)/output/$(INSTALL_SODIR)

12、utils_com/third_part/libssh2 makefile修改17行：
	EXTRA_FLAGS = $(BUILD_CFLAGS) -I$(include_dir)

13、utils_com/third_part/rg-libnl中libnl.mk 修改120行判断屏蔽#ifeq($(BR2_ARCH),"aarch64") 判断语句只要else

14、utils_com/third_part/libpcap中Rule.mk 修改64行 -include $(KCONFIG)

15、utils_com/third_part/readline中Rule.mk 修改64行 -include $(KCONFIG)
	Makefile修改24行install: build
	ARCH改为ARCH64
	
16、utils_com/third_part/rg_lua中Makefile大改：
'''
						.PHONY: all

						all: build install

						.PHONY: build

						build: build_src
						build_lib:
							$(MAKE) CFLAGS="$(CFLAGS)" -C $(top_srcdir)/src/lib _PDIR="$(OUTPUT_DIR)/src/lib"
							@echo "Compiled OK! find output in $(OUTPUT_DIR)/src/lib"
						build_luac: build_lib
							$(MAKE) CFLAGS="$(CFLAGS)" -C $(top_srcdir)/src/luac _PDIR="$(OUTPUT_DIR)/src/luac"
							@echo "Compiled OK! find output in $(OUTPUT_DIR)/src/luac"
						build_src: build_luac
							$(MAKE) CFLAGS="$(CFLAGS)" -C $(top_srcdir)/src _PDIR="$(OUTPUT_DIR)/src"
							@echo "Compiled OK! find output in $(OUTPUT_DIR)/src"

						.PHONY: install

						install: build
							@mkdir -p $(IMAGES)/rootfs/usr/bin
							@cp -af $(install_root)/rootfs/$(INSTALL_SODIR)/* $(IMAGES)/rootfs/$(INSTALL_SODIR)
							@cp -af $(install_root)/rootfs/usr/bin/* $(IMAGES)/rootfs/usr/bin
'''
								Rule.mk 修改43行添加 -I$(IMAGES)/header
								        修改44行添加 -L$(IMAGES)/rootfs/$(INSTALL_SODIR)

17、utils_com/third_part/libnumactl中Rule.mk 修改64行 -include $(KCONFIG)
	Makefile修改29行install: build

18、rg-zip（还未测试）
    rg-unzip

18、utils_com/third_part/lnsp
	Makefile.nginx修改install: build
	              添加31行--with-openssl=$(IMAGES)/header/openssl \
				  修改22、42行aarch64-linux-gnu为aarch64-none-linux-gun
	Makefile.atomic修改install: build